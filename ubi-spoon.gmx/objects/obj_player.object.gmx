<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>spd = 3;
image_speed = 0.3;
dir = 0; //looking direction
looking_inst = -1; //instance the player is looking at
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var up = bind_check("walkUp");
var down = bind_check("walkDown");
var left = bind_check("walkLeft");
var right = bind_check("walkRight");

//animations
if (up){
  sprite_index = spr_player_u;
  image_xscale = 1;
  dir = 1;
}
else if (down){
  sprite_index = spr_player_d;
  image_xscale = 1;
  dir = 3;
}
else if (right){
  sprite_index = spr_player_r;
  image_xscale = 1;
  dir = 0;
}
else if(left){
  sprite_index = spr_player_l;
  dir = 2;
}else{
  image_index = 0;
}

//walking and collision

hspd = (right - left) * spd;
vspd = (down - up) * spd;

if(hspd != 0 &amp;&amp; vspd != 0) {
    if(!place_meeting(x + hspd, y + vspd, obj_collision)) {
        x += hspd;
        y += vspd;
    } else {
        for(var i = 0; i &lt; abs(hspd); i++) {
            if(!place_meeting(x + sign(hspd), y, obj_collision)) x += sign(hspd);
            if(!place_meeting(x, y + sign(vspd), obj_collision)) y += sign(vspd);
            //else break;
        }
    }
}
else
if(hspd != 0) {
    if(!place_meeting(x + hspd, y, obj_collision)) {
        x += hspd;
    } else {
        for(var i = 0; i &lt; abs(hspd); i++) {
            if(!place_meeting(x + sign(hspd), y, obj_collision)) x += sign(hspd);
            else break;
        }
    }
}
else
if(vspd != 0) {
    if(!place_meeting(x, y + vspd, obj_collision)) {
        y += vspd;
    } else {
        for(var i = 0; i &lt; abs(vspd); i++) {
            if(!place_meeting(x, y + sign(vspd), obj_collision)) y += sign(vspd);
            else break;
        }
    }
}


//interaction
var inst = -1;
switch (dir){
  case 0:
    inst = collision_rectangle(x,y-8,x+16,y+8,obj_interactable,0,0);
  break;
  case 1:
    inst = collision_rectangle(x-8,y-16,x+8,y,obj_interactable,0,0);
  break;
  case 2:
    inst = collision_rectangle(x-16,y-8,x,y+16,obj_interactable,0,0);
  break;
  case 3:
    inst = collision_rectangle(x-8,y,x+8,y+16,obj_interactable,0,0);
  break;
}

if (inst != -1){
  if (instance_exists(inst)){
    looking_inst = inst;
    if (bind_check_pressed('interact')){
      if (looking_inst.master != -1){
        with (looking_inst.master){
          event_user(0);
        }
      }
    }
  }else{
    looking_inst = -1;
  }
}



//camera

obj_camera.x = x;
obj_camera.y = y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
