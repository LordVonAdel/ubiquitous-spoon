<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>spd = 3;
x = 0;
y = 0;

viewBlockGrid = ds_grid_create(1,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(keyboard_check_pressed(ord("F"))) {
    window_set_fullscreen(!window_get_fullscreen());
}

view_wview[0] = window_get_width() / 4;
view_hview[0] = window_get_height() / 4;

view_wport[0] = window_get_width();
view_hport[0] = window_get_height();

view_xview[0] = x - view_wview[0] / 2;
view_yview[0] = y - view_hview[0] / 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !view_enabled
{
  view_visible[0] = true;
  view_enabled = true;
}
room_speed = 60;

var ids = tile_get_ids();

ds_grid_resize(viewBlockGrid,floor(room_width/16),floor(room_height/16));
ds_grid_clear(viewBlockGrid,-1);

for(var i=0; i&lt;array_length_1d(ids); i++){
  var tile = ids[i];
  if (tile_get_background(tile) == bg_tiles_viewblocker){
    var cx = floor(tile_get_x(tile)/16);
    var cy = floor(tile_get_y(tile)/16);
    viewBlockGrid[# cx, cy] = tile_get_left(tile)/16;
    tile_delete(tile);
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///field of view
draw_set_color($121212);
for(var i=max(floor(view_xview[0]/16),0); i&lt;min(view_wview[0]+view_xview[0],room_width)/16; i++){
  for (var j=max(floor(view_yview[0]/16),0); j&lt;min(view_hview[0]+view_yview[0],room_height)/16; j++)
  {
    var cell = viewBlockGrid[# i, j];
    if (cell == 0){
      if (j*16 &lt; obj_player.y){
        shadow_line(i*16,j*16,i*16+16,j*16,obj_player.x,obj_player.y);
      }
      if (j*16 &gt; obj_player.y-16){
        shadow_line(i*16,j*16+16,i*16+16,j*16+16,obj_player.x,obj_player.y);
      }
    }else if(cell == 1){
      shadow_line(i*16,j*16,i*16,j*16+16,obj_player.x,obj_player.y);
    }else if(cell == 2){
      shadow_line(i*16+16,j*16,i*16+16,j*16+16,obj_player.x,obj_player.y);
    }else if(cell == 3){
      shadow_line(i*16,j*16,i*16+16,j*16,obj_player.x,obj_player.y);
      shadow_line(i*16,j*16,i*16,j*16+16,obj_player.x,obj_player.y);
    }else if(cell == 4){
      shadow_line(i*16,j*16,i*16+16,j*16,obj_player.x,obj_player.y);
      shadow_line(i*16+16,j*16,i*16+16,j*16+16,obj_player.x,obj_player.y);
    }
  };
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
